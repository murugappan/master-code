<apex:page controller="pw_cc.CountryCompleteController" title="ProvenWorks CountryComplete">
    
    <style type="text/css">
    	.contentClass{margin:0;padding:0 0 0 1px;font-size:12px;border:0 solid white;background-color:white;}
    	.headerClass{border:0 solid white;}
    	.activeTab{color:white;background-image:none;background-color:#EF2B2D;}
    	.inactiveTab{cursor:pointer;color:black;background-image:none;background-color:{!IF($User.UIThemeDisplayed = 'Theme3','#F8F8F8','#F3F3EC')};}
		.dr-tbpnl-tb-sel{border-color:#EF2B2D;}
		.bPageBlock .pbTitle h2 {width:500px;}
    </style>
    
    <apex:form >
	    <apex:includeScript value="{!URLFOR($Resource.pw_cc__BaseScripts, '/BaseScripts/jQuery.js')}"/>
	    <apex:includeScript value="{!URLFOR($Resource.pw_cc__BaseScripts, '/BaseScripts/jQuery.blockUI.js')}"/> 
	   	<script type="text/javascript">    		    		
	   		var pw_cc_bs_jQuery = jQuery.noConflict(true);
	   		
	   		var _currentStep = 0;
	        var _totalSteps = 0;
	        
	        function showElement(id) {
	            document.getElementById(id).style.display = 'block';        
	        }
	        
	        function hideElement(id) {
	            document.getElementById(id).style.display = 'none';
	        }
	        
	        function setText(elem, text) {
	        	if (elem.textContent != undefined)
	        		elem.textContent = text;
	        	else if (elem.innerText != undefined)
	        		elem.innerText = text;
	        	else if (elem.nodeValue != undefined)
	        		elem.nodeValue = text;
	        }
	        
	   		function installCustoms() {
	   			{!Confirm}
	   			_currentStep = 0;
	   			updateProgress(0, 1);
	   			hideElement('resultDiv');
	   			showElement('installingDiv');
	   			showElement('progressDiv');
	   			blockUI('dlgProgress');
	   			var langList = document.getElementById('{!$Component.pbInstall.languageList}');
	   			beginInstall(langList.options[langList.selectedIndex].value);
	   			_currentStep++;
	   		}
	   		
	   		function insertBatch() {
	   			var errorMessage = document.getElementById('hdnError').value;
	   			if (errorMessage == 'true') {
	   				hideElement('resultDiv');
	   				hideElement('installingDiv');
	   				hideElement('progressDiv');
	   				unblockUI();
	   				return;
	   			}
	   			_totalSteps = parseInt(document.getElementById('hdnCountSteps').value);
	            if (_totalSteps > 0 && _currentStep < _totalSteps) {
	                updateProgress(_currentStep, _totalSteps - 1);
	                insertMore(_currentStep++);                
	            } else {
	   				hideElement('installingDiv');
	   				hideElement('progressDiv');
	   				showElement('resultDiv');
	   				setOptionsStatus();
	            }
	   		}
	   		
	   		function updateProgress(currentStep, totalSteps) {
	            var width = currentStep * (350 / totalSteps);
	            document.getElementById('progressBar').style.width = width + 'px';
	        }
	
	        function blockUI(id) {
	            var dlg = pw_cc_bs_jQuery('#' + id);
		            pw_cc_bs_jQuery.blockUI({
	                message: dlg,
	                fadeIn: 0,
	                fadeOut: 0,
	                css: {
	                    borderWidth: 2,
	                    borderColor: '#EF2B2D',
	                    backgroundColor: '#F3F3EC',
	                    cursor: 'default',
	                    padding: '9px',
	                    width: '354px'
	                }		                
	            });
	       	}
	       	
	       	function unblockUI() {
	       		pw_cc_bs_jQuery.unblockUI({
	       			fadeIn: 0,
	                fadeOut: 0
	            });
	       	}
	       	
			function join(arr) {
				var result = '';
				for (var i = 0; i < arr.length; i++) {
					if (i > 0) result += ',';
					result += arr[i];
				}
			
				return result;
			}
			
			function updateSelectedCountries(left, hid, ch) {
				pw_cc_bs_jQuery(hid).val(join(pw_cc_bs_jQuery.map(pw_cc_bs_jQuery(left + ' option'), function(o) { return o.value; })));
				pw_cc_bs_jQuery(ch).val('true');
			}
			
			function addCountries(left, right, hid, ch) {
				pw_cc_bs_jQuery(right + ' option:selected').remove().appendTo(left);
				updateSelectedCountries(left, hid, ch);
			}
			
			function removeCountries(left, right, hid, ch) {
				pw_cc_bs_jQuery(left + ' option:selected').remove().appendTo(right);
				updateSelectedCountries(left, hid, ch);
			}
			
			function setOptionsStatus() {				
				var isCheck = document.getElementById('{!$Component.pbStValSettings.countryCompleteEnabled}').checked;
				
				var checkbox1 = document.getElementById('{!$Component.pbStValSettings.onlyOperateWhenChanged}');
				var label1 = document.getElementById('{!$Component.pbStValSettings.onlyOperateWhenChangedLabel}');
				var labelAlt1 = document.getElementById('onlyOperateWhenChangedText');
				
				var checkbox2 = document.getElementById('{!$Component.pbStValSettings.runOnce}');
				var label2 = document.getElementById('{!$Component.pbStValSettings.runOnceLabel}');
				var labelAlt2 = document.getElementById('runOnceText');
							
				if (isCheck) {
					checkbox1.removeAttribute('disabled');
					label1.removeAttribute('disabled');
					
					label2.removeAttribute('disabled');
					checkbox2.removeAttribute('disabled');
					
					if (navigator.appName == 'Microsoft Internet Explorer') {
						label1.style.display = 'inline';
						labelAlt1.style.display = 'none';
						
						label2.style.display = 'inline';
						labelAlt2.style.display = 'none';
					}
				} else {
					checkbox1.checked = false;
					checkbox1.setAttribute('disabled', 'true');
					label1.setAttribute('disabled', 'true');
					
					checkbox2.checked = false;
					checkbox2.setAttribute('disabled', 'true');
					label2.setAttribute('disabled', 'true');					
					
					if (navigator.appName == 'Microsoft Internet Explorer') {
						label1.style.display = 'none';
						labelAlt1.style.display = 'inline';
	
						label2.style.display = 'none';
						labelAlt2.style.display = 'inline';						
					}
				}
			}
			
			function updateEntityFields(entityList, countryList, stateList, countryRelList, stateRelList) {
				var mandatory = document.getElementById('{!$Component.chkCountryMandatory}').checked;
				var onlylisted = document.getElementById('{!$Component.chkAllowOnlyListedCountries}').checked;
				var standardize = document.getElementById('{!$Component.chkStandardize}').checked;			
				var countryFieldIdInput = document.getElementById('{!$Component.entityCountryFieldId}');
				var stateFieldIdInput = document.getElementById('{!$Component.entityStateFieldId}');
				var entity = entityList.value;
				var country = countryList != null ? countryList.value : '';
				var state = stateList != null ? stateList.value : ''; 
				var countryRel = countryRelList != null ? countryRelList.value : '';
				var stateRel = stateRelList != null ? stateRelList.value : '';
				var countryFieldId = countryFieldIdInput != null ? countryFieldIdInput.value : '';
				var stateFieldId = stateFieldIdInput != null ? stateFieldIdInput.value : '';
				updateEntityFieldsAction(entity, country, state, countryRel, stateRel, countryFieldId, stateFieldId, mandatory, onlylisted, standardize);
			}
			
			function saveCustomSettings() {
				blockUI('dlgWait');
				saveCustomSettingsAction();
			}
			
			function saveObjectSettings() {
				saveObjectSettingsAction();
			}
			
			function saveObjectSettingsCompleted() {
				unblockUI();
			}
			
			function buyAdditionalCredits(name) {
				window.open(document.getElementById('btnPurchase' + name).href);
			}
			
			function buyLicense() {
				var label = document.getElementById('lblBuyMessage');
				label.innerHTML = ""; 
		        var numberOfLicenses = parseInt(document.getElementById('txtLicenses').value);
		        if (isNaN(numberOfLicenses) || numberOfLicenses <= 0) {
		            label.innerHTML = "Please enter a number of 1 or more";
		            return;
		        }
		        var minUsers = 50; 
		        if (numberOfLicenses <= minUsers) {
		            window.open(document.getElementById('btnBuyLicense').href);
		        } else {
		            window.open(document.getElementById('btnBuyAdditionalLicense').href + (numberOfLicenses - minUsers));
		        }
			}
			
			function initTabs() {
				var entityName = document.getElementById('{!$Component.entityName}');
				var countryField = document.getElementById('{!$Component.entityCountryField}');
				var stateField = document.getElementById('{!$Component.entityStateField}');
				if (entityName != null)
					entityName.value = '';
				if (countryField != null)
					countryField.value = '';
				if (stateField != null)
					stateField.value = '';				
			}
			
			pw_cc_bs_jQuery(document).ready(function() {
				setOptionsStatus();
			});
    	</script>
    	
    	<apex:sectionHeader title="ProvenWorks CountryComplete" />
    	
  		<apex:outputPanel id="install_out">
            <input type="hidden" id="hdnCountSteps" value="{!CountInstallSteps}" />
            <input type="hidden" id="hdnError" value="{!IsError}" />
            <apex:pageMessages rendered="{!IsError}" />
        </apex:outputPanel>
        
        <div id="dlgProgress" style="text-align:center;display:none;">
		    <div id="progressDiv" style="border:solid 1px #000000;padding:1px;width:350px;background-color:#F3F3EC;text-align:left;">
		        <span id="progressBar" style="background-color:#EF2B2D;width:0px;height:50px;overflow:hidden;display:inline-block;"></span>
		    </div>
			<div id="installingDiv" style="width:350px;">Installing, please wait...</div>
		    <div id="resultDiv" style="width:350px;">
		    	<div><b>Defaults installed</b></div>
		    	<div style="text-align:justify;">Please now force refresh your browser (under windows <span style="color:red;">CTRL+F5</span>) to ensure that the new country values are loaded</div>
		    	<div>
		    		<input id="btnOk" type="button" class="btn" value="OK" onclick="unblockUI();" />
		    	</div>
		    </div>
		</div>
		
		<div id="dlgWait" style="display:none;">
	    	<div>Please wait...</div>
		</div>
		
		<div id="dlgFieldsAddEdit" style="display:none;">
	    	<apex:outputPanel id="editFieldDialog">
		    	<div style="width:350px;padding-bottom:10px;text-align:center;">
	   			    <div style="display:{!IF(NOT(IsEditMode), 'inline', 'none')};">
	   					<b>Add field to Validate / Standardize</b>
	   				</div>
	   				<div style="display:{!IF(IsEditMode, 'inline', 'none')};">
	   					<b>Edit field to Validate / Standardize</b>
	   				</div>
		    	</div>
		    	<div style="width:350px;text-align:left;">
					Select object and country field you want to validate on input.
		    	</div>	
		    	<div style="width:350px;margin-top:10px;text-align:left;display:{!IF(IsVersionPro, 'block', 'none')};">
					<i>Please note: Custom and unsupported objects will require custom triggers. Validation logic is supported for Accounts, Contacts, Contracts and Leads by default.</i>
		    	</div>		    
		    	<fieldset style="margin-top:10px;">
			    	<div style="text-align:left;">
				    	<table>
				    		<tr>
				    			<td align="left" style="width:150px;"><apex:outputLabel value="Object" for="entityName" /></td>
				    			<td align="left">
						    		<apex:selectList id="entityName" style="width:180px;" onchange="updateEntityFields(this, null, null, null, null)" value="{!SelectedEntityName}" size="0">
						    	        <apex:selectOptions value="{!EntityNamesOptions}" />
						            </apex:selectList>
				    			</td>
				    		</tr>
			    		</table>
			    	</div>
			    	<div style="text-align:left;display:{!IF(IsEntityCountryFields, 'block', 'none')};">
			    		<table>
				    		<tr>
				    			<td align="left" style="width:150px;"><apex:outputLabel value="Country Field" for="entityCountryField" /></td>
				    			<td align="left">
									<apex:selectList rendered="{!IsEntityCountryFields}" id="entityCountryField" style="width:180px;" onchange="{!IF(IsVersionPro, '', 'return;')}updateEntityFields(document.getElementById('{!$Component.entityName}'), this, null, null, null)" value="{!SelectedCountryField}" size="0">
							           <apex:selectOptions value="{!EntityCountryFieldsOptions}" />
				                    </apex:selectList>
				    			</td>
				    		</tr>
				    		<tr style="display:{!IF(IsVersionPro, 'table-row', 'none')};">
				    			<td align="left"><apex:outputLabel value="State Field" for="entityStateField" /></td>
				    			<td align="left">
									<apex:selectList rendered="{!AND(IsEntityCountryFields, IsVersionPro)}" id="entityStateField" style="width:180px;" onchange="{!IF(IsVersionPro, '', 'return;')}updateEntityFields(document.getElementById('{!$Component.entityName}'), document.getElementById('{!$Component.entityCountryField}'), this, document.getElementById('{!$Component.entityCountryRelationshipField}'), null)" value="{!SelectedStateField}" size="0">
							             <apex:selectOptions value="{!EntityStateFieldsOptions}" />
				                    </apex:selectList>
				    			</td>
				    		</tr>
				    		<tr style="display:{!IF(IsVersionPro, 'table-row', 'none')};">
				    			<td align="left"><apex:outputLabel value="Country Lookup" for="entityCountryRelationshipField" /></td>
				    			<td align="left">
									<apex:selectList rendered="{!AND(IsEntityCountryFields, IsVersionPro)}" id="entityCountryRelationshipField" style="width:180px;" onchange="{!IF(IsVersionPro, '', 'return;')}updateEntityFields(document.getElementById('{!$Component.entityName}'), document.getElementById('{!$Component.entityCountryField}'), document.getElementById('{!$Component.entityStateField}'), this, document.getElementById('{!$Component.entityStateRelationshipField}'))" value="{!SelectedCountryRelationshipField}" size="0">
							             <apex:selectOptions value="{!EntityCountryRelationshipFieldsOptions}" />
				                    </apex:selectList>
				    			</td>
				    		</tr>
				    		<tr style="display:{!IF(IsVersionPro, 'table-row', 'none')};">
				    			<td align="left"><apex:outputLabel rendered="{!AND(IsEntityCountryFields, IsVersionPro, IsEntityStateField)}" value="State Lookup" for="entityStateRelationshipField" /><apex:outputPanel rendered="{!AND(IsEntityCountryFields, IsVersionPro, NOT(IsEntityStateField))}">State Lookup</apex:outputPanel></td>
				    			<td align="left">
									<apex:selectList rendered="{!AND(IsEntityCountryFields, IsVersionPro, IsEntityStateField)}" id="entityStateRelationshipField" style="width:180px;" onchange="{!IF(IsVersionPro, '', 'return;')}updateEntityFields(document.getElementById('{!$Component.entityName}'), document.getElementById('{!$Component.entityCountryField}'), document.getElementById('{!$Component.entityStateField}'), document.getElementById('{!$Component.entityCountryRelationshipField}'), this)" value="{!SelectedStateRelationshipField}" size="0">
							             <apex:selectOptions value="{!EntityStateRelationshipFieldsOptions}" />
				                    </apex:selectList>
				                    <apex:outputPanel rendered="{!AND(IsEntityCountryFields, IsVersionPro, NOT(IsEntityStateField))}"><i>Choose a state field</i></apex:outputPanel>
				    			</td>
				    		</tr>
					    	<tr style="display:{!IF(IsVersionPro, 'table-row', 'none')};">
				    			<td align="left"><apex:outputLabel value="Country Field Id ? " for="entityCountryFieldId" title="Find the field ID by clicking on the field name in the list of custom fields in the relevant setup menu. The 15 character ID after 'salesforce.com/' in the URL is the field ID."/></td>
				    			<td align="left">
									<apex:inputText rendered="{!AND(IsEntityCountryFields, IsVersionPro)}" id="entityCountryFieldId" style="width:180px;" value="{!InputCountryFieldId}" />
				    			</td>
				    		</tr>
				    		<tr style="display:{!IF(IsVersionPro, 'table-row', 'none')};">
				    			<td align="left"><apex:outputLabel value="State Field Id ? " for="entityStateFieldId" title="Find the field ID by clicking on the field name in the list of custom fields in the relevant setup menu. The 15 character ID after 'salesforce.com/' in the URL is the field ID." /></td>
				    			<td align="left">
									<apex:inputText rendered="{!AND(IsEntityCountryFields, IsVersionPro)}" id="entityStateFieldId" style="width:180px;" value="{!InputStateFieldId}" />
				    			</td>
				    		</tr>   		
				    		<tr>
				    			<td align="left"><apex:outputLabel value="Country Mandatory" for="chkCountryMandatory" /></td>
				    			<td align="left">
									<apex:inputCheckbox id="chkCountryMandatory" value="{!IsCheckedMandatory}" />
				    			</td>
				    		</tr>
				    		<tr>
				    			<td align="left"><apex:outputLabel value="Only Listed Countries" for="chkAllowOnlyListedCountries" /></td>
				    			<td align="left">
									<apex:inputCheckbox id="chkAllowOnlyListedCountries" value="{!IsCheckedAllowOnlyListedCountries}" />
				    			</td>
				    		</tr>
				    		<tr>
				    			<td align="left"><apex:outputLabel value="Standardize" for="chkStandardize" title="Change common alternative names to agreed standards" /></td>
				    			<td align="left">
									<apex:inputCheckbox id="chkStandardize" value="{!IsCheckedStandardize}" />
				    			</td>
				    		</tr>
			    		</table>
			    	</div>
			    	<div style="padding-top:8px;display:{!IF(NOT(IsEntityCountryFields), 'block', 'none')};">
		    			<div><i>No fields to add</i></div>
		    		</div>
	    		</fieldset>
				<div style="width:350px;padding-top:10px;text-align:center;">
					<apex:outputPanel rendered="{!IsEntityCountryFields}" style="padding-right:30px;"><apex:commandButton id="btnAddField" value="OK" onclick="addValidatedField(document.getElementById('{!$Component.entityName}').value, document.getElementById('{!$Component.entityCountryField}').value, document.getElementById('{!$Component.entityStateField}') == null ? '' : document.getElementById('{!$Component.entityStateField}').value, document.getElementById('{!$Component.entityCountryRelationshipField}') == null ? '' : document.getElementById('{!$Component.entityCountryRelationshipField}').value, document.getElementById('{!$Component.entityStateRelationshipField}') == null ? '' : document.getElementById('{!$Component.entityStateRelationshipField}').value, document.getElementById('{!$Component.entityCountryFieldId}') == null ? '' : document.getElementById('{!$Component.entityCountryFieldId}').value, document.getElementById('{!$Component.entityStateFieldId}') == null ? '' : document.getElementById('{!$Component.entityStateFieldId}').value, document.getElementById('{!$Component.chkCountryMandatory}').checked, document.getElementById('{!$Component.chkAllowOnlyListedCountries}').checked, document.getElementById('{!$Component.chkStandardize}').checked);return false;"/></apex:outputPanel>
					<span><input type="button" class="btn" value="Cancel" onclick="unblockUI();" /></span>					
				</div>
			</apex:outputPanel>
		</div>

        <apex:tabPanel switchType="client" contentClass="contentClass" headerClass="headerClass" activeTabClass="activeTab" inactiveTabClass="inactiveTab">	    
		    <apex:tab label="Installation" ontabenter="initTabs();">
		        <apex:actionFunction name="beginInstall" action="{!BeginInstall}" oncomplete="insertBatch();" rerender="install_out">
		        	<apex:param name="lang" assignTo="{!SelectedLanguage}" value="en"  />
		        </apex:actionFunction>
		        <apex:actionFunction name="insertMore" action="{!InsertCurrentBatch}" oncomplete="insertBatch();" rerender="install_out, countries_out, validate_out, validatedFields">
		            <apex:param name="step" assignTo="{!CurrentInstallStep}" value="1" />
		        </apex:actionFunction>        
		        <apex:pageBlock id="pbInstall" title="Step 1: Install Defaults" rendered="{!CanEditSettings}">
					<div id="buttonDiv">
					    <div>Select your language and click the button below to install the country list and default settings. Note: All users will see the country names in the selected language regardless of their local language.</div>
					    <div>
					    	<table>
					    		<tr>
					    			<td>
						    			<apex:selectList id="languageList" style="width:130px;" value="{!SelectedLanguage}" size="0">
							    	        <apex:selectOptions value="{!LanguageOptions}" />
							            </apex:selectList>
					    			</td>
					    			<td><input type="button" class="btn" value="Install Defaults" onclick="installCustoms();" /></td>
					    		</tr>
					    	</table>
					    </div>                                                                
					</div>
				</apex:pageBlock>
				<apex:pageBlock title="Step 2: Fix existing Data and Enable Enhancements (Optional)" rendered="{!CanEditSettings}">			
					<table>
						<tr>
							<td>
								<span>Country Detection finds and suggests fixes for your existing irregular and missing country data. Try it free on the Country Detection tab with the 20 lookups included with your CountryComplete Install.</span>
								<br />
								<input type="button" class="btn" value="Purchase Lookups" onclick="buyAdditionalCredits('300377345');return false;" />
							</td>
						</tr>
						<tr>
							<td>
								<span>Address Validation validates your addresses for mail deliverability down to the street level in countries where data is available. Support for Addresses in over 240 countries!</span>
								<br />
								<input type="button" class="btn" value="Purchase Validations" onclick="buyAdditionalCredits('300454020');return false;" />
							</td>
						</tr>
						<tr>
							<td><a href="http://www.provenworks.com/media/2258/countrycomplete%20pricing%20guide.docx" title="Pricing Guide">Pricing Guide</a></td>
						</tr>
					</table>
				</apex:pageBlock>			
				<apex:pageBlock title="Step 3: Enable Sidebar Components" rendered="{!CanEditSettings}">	
					<ol style="padding:0; margin:0pt;">
					    <li>Add the CountryComplete and Address Validation components to the Home Page Layout. Navigate to the Setup section and expand Customize->Home->Home Page Layouts, and be sure to save once you have added the components.</li>
					    <li>To enable the sidebar components on every form (recommended), navigate to Setup then go to Customize->User Interface, check "Show Custom Sidebar Components on All Pages" under the Sidebar section.</li>
					</ol>	
				</apex:pageBlock>
				<apex:pageBlock title="Step 4: Customize and Enable" rendered="{!CanEditSettings}">			
					<div>CountryComplete is fully customizable; choose which countries to display, and how strict to make your validation rules on the settings tab. Once you have made your customizations, check “Enable Country Complete” and save to begin validation and standardization of your chosen fields!</div>
				</apex:pageBlock>
		        <apex:pageBlock rendered="{!CanEditSettings == false}">
					CountryComplete Settings can only modified by a user with the ModifyAllData permission. If this does not fit your requirements please contact <a href="mailto:support@provenworks.com" title="Support">support@provenworks.com</a>.
				</apex:pageBlock>
	       	</apex:tab>
	
	        <apex:tab label="Settings" rendered="{!CanEditSettings}" ontabenter="initTabs();">
	       		<apex:pageBlock id="pbCountrySpecSet" title="Country Specific Settings" >
	       			<apex:pageBlockButtons location="bottom">
		            	<apex:commandButton value="Save All" onclick="saveCustomSettings();return false;" />
		            </apex:pageBlockButtons>
		     		<apex:panelGroup >    
			      		<apex:outputPanel id="countries_out">
				     		<table>
				     			<tr>
						    		<td> 
							            <apex:outputPanel >
								            <input id="allSelectedCountries" name="allSelectedCountries" type="hidden" value="" />
							                <input id="selectedCountriesChanged" name="selectedCountriesChanged" type="hidden" value="" />
							     			<c:duelingListBox leftId="selectedCountries" rightId="availableCountries" leftCaption="Displayed Countries" rightCaption="Hidden Countries" leftData="{!SelectedCountries}" rightData="{!AvailableCountries}" onadd="addCountries('#selectedCountries', '#availableCountries', '#allSelectedCountries', '#selectedCountriesChanged')" onremove="removeCountries('#selectedCountries', '#availableCountries', '#allSelectedCountries', '#selectedCountriesChanged')"></c:duelingListBox>
						     			</apex:outputPanel>					
						            </td>
									<td style="padding-left:40px;"> 
							            <apex:outputPanel rendered="{!IsVersionPro}">
								            <input id="allSelectedCountries_listedstate" name="allSelectedCountries_listedstate" type="hidden" value="" />
							                <input id="selectedCountriesChanged_listedstate" name="selectedCountriesChanged_listedstate" type="hidden" value="" />
											<c:duelingListBox leftId="selectedCountries_listedstate" rightId="availableCountries_listedstate" leftCaption="Allow only listed states" rightCaption="Allow any state values" leftData="{!SelectedCountriesListedState}" rightData="{!AvailableCountriesListedState}" onadd="addCountries('#selectedCountries_listedstate', '#availableCountries_listedstate', '#allSelectedCountries_listedstate', '#selectedCountriesChanged_listedstate')" onremove="removeCountries('#selectedCountries_listedstate', '#availableCountries_listedstate', '#allSelectedCountries_listedstate', '#selectedCountriesChanged_listedstate')"></c:duelingListBox>
										</apex:outputPanel>		                
						            </td>
					            </tr>
					            <tr>
									<td> 
							            <apex:outputPanel rendered="{!IsVersionPro}">
								            <input id="allSelectedCountries_mandatory" name="allSelectedCountries_mandatory" type="hidden" value="" />
							                <input id="selectedCountriesChanged_mandatory" name="selectedCountriesChanged_mandatory" type="hidden" value="" />
											<c:duelingListBox leftId="selectedCountries_mandatory" rightId="availableCountries_mandatory" leftCaption="State is mandatory" rightCaption="State is not mandatory" leftData="{!SelectedCountriesMandatoryState}" rightData="{!AvailableCountriesMandatoryState}" onadd="addCountries('#selectedCountries_mandatory', '#availableCountries_mandatory', '#allSelectedCountries_mandatory', '#selectedCountriesChanged_mandatory')" onremove="removeCountries('#selectedCountries_mandatory', '#availableCountries_mandatory', '#allSelectedCountries_mandatory', '#selectedCountriesChanged_mandatory')"></c:duelingListBox>
										</apex:outputPanel>                           
						            </td>
									<td style="padding-left:40px;">
							            <apex:outputPanel rendered="{!IsVersionPro}">
								            <input id="allSelectedCountries_iso" name="allSelectedCountries_iso" type="hidden" value="" />
							                <input id="selectedCountriesChanged_iso" name="selectedCountriesChanged_iso" type="hidden" value="" />
											<c:duelingListBox leftId="selectedCountries_iso" rightId="availableCountries_iso" leftCaption="Store state code" rightCaption="Store state name" leftData="{!SelectedCountriesISOState}" rightData="{!AvailableCountriesISOState}" onadd="addCountries('#selectedCountries_iso', '#availableCountries_iso', '#allSelectedCountries_iso', '#selectedCountriesChanged_iso')" onremove="removeCountries('#selectedCountries_iso', '#availableCountries_iso', '#allSelectedCountries_iso', '#selectedCountriesChanged_iso')"></c:duelingListBox>
										</apex:outputPanel>                           
						            </td>
					            </tr>
				            </table>
			            </apex:outputPanel>
		        	</apex:panelGroup>	
				</apex:pageBlock>
		       	<apex:pageBlock id="pbStValSettings" title="Standardization and Validation Settings" >
		          	<apex:pageBlockButtons location="bottom">
		            	<apex:commandButton value="Save All" onclick="saveCustomSettings();return false;" />
		            </apex:pageBlockButtons>		
					<apex:panelGroup >             
						<apex:outputPanel id="validate_out">
				 			<div>
								<apex:inputCheckbox id="countryCompleteEnabled" value="{!CountryCompleteEnabled}" onclick="setOptionsStatus();" />
								<apex:outputLabel for="countryCompleteEnabled" value="CountryComplete Enabled" />
				            </div>
				            <div>
								<apex:inputCheckbox id="runOnce" value="{!RunOnce}" />
								<apex:outputLabel id="runOnceLabel" for="runOnce" value="Run the CountryComplete trigger to validate / standardize objects only once (useful if you have multiple triggers on validated objects)" />
								<label for="{!$Component.pbStValSettings.runOnce}" id="runOnceText" style="display:none;" disabled="disabled">Run the CountryComplete trigger to validate / standardize objects only once (useful if you have multiple triggers on validated objects)</label> 
				            </div>
							<div>
								<apex:inputCheckbox id="onlyOperateWhenChanged" value="{!OnlyOperateWhenChanged}" />
								<apex:outputLabel id="onlyOperateWhenChangedLabel" for="onlyOperateWhenChanged" value="{!OnlyOperateWhenChangedText}" />
								<label for="{!$Component.pbStValSettings.onlyOperateWhenChanged}" id="onlyOperateWhenChangedText" style="display:none;" disabled="disabled">{!OnlyOperateWhenChangedText}</label> 
				            </div>	 
				            <div style="display:{!IF(IsVersionPro, 'block', 'none')};">
				            	<br />
				            	<apex:outputLabel rendered="{!IsVersionPro}" for="countryCodeList" value="Store country value as " />
								<apex:selectList rendered="{!IsVersionPro}" id="countryCodeList" style="width:200px;" value="{!StoreCountryInCode}" size="0">
						           <apex:selectOptions value="{!StoreCountryCodeOptions}" />
			                    </apex:selectList>			             
				            </div>           
			            </apex:outputPanel>
			     	</apex:panelGroup>
			     </apex:pageBlock>
			     <apex:pageBlock title="Fields to Validate / Standardize" >
			     	<apex:pageBlockButtons location="bottom">
			     		<apex:commandButton value="Add" onclick="openAddDialog();return false;" />
		            	<apex:commandButton value="Reset to Defaults" onclick="resetDefaultsAction(); return false;" />
		            	<apex:commandButton value="Save All" onclick="saveCustomSettings();return false;" />   	
		            </apex:pageBlockButtons>
			     	<apex:panelGroup >
						<apex:actionFunction name="resetDefaultsAction" action="{!ResetValidatedFieldsToDefaults}" rerender="install_out, validatedFields" status="waitingStatus" />
						<apex:actionFunction name="saveCustomSettingsAction" action="{!SaveCustomSettings}" oncomplete="saveObjectSettings();" rerender="install_out, validatedFields" />
						<apex:actionFunction name="saveObjectSettingsAction" action="{!SaveObjectSettings}" oncomplete="saveObjectSettingsCompleted();" rerender="install_out, countries_out, validatedFields" />
						<apex:actionFunction name="updateEntityFieldsAction" action="{!UpdateEntityFields}" reRender="editFieldDialog" status="waitingStatusEditing">
							<apex:param name="firstParam" assignTo="{!SelectedEntityName}" value="" />
							<apex:param name="secondParam" assignTo="{!SelectedCountryField}" value="" />
							<apex:param name="thirdParam" assignTo="{!SelectedStateField}" value="" />
							<apex:param name="fourthParam" assignTo="{!SelectedCountryRelationshipField}" value="" />
							<apex:param name="fifthParam" assignTo="{!SelectedStateRelationshipField}" value="" />
							<apex:param name="sixthParam" assignTo="{!InputCountryFieldId}" value="" />
							<apex:param name="seventhParam" assignTo="{!InputStateFieldId}" value="" />							
							<apex:param name="updValidatedFieldMandatory" assignTo="{!IsCheckedMandatory}" value="" />
							<apex:param name="updValidatedFieldAllowOnly" assignTo="{!IsCheckedAllowOnlyListedCountries}" value="" />
							<apex:param name="updValidatedFieldStandardize" assignTo="{!IsCheckedStandardize}" value="" />						
		      			</apex:actionFunction>
						<apex:actionFunction name="addValidatedField" action="{!AddValidatedField}" reRender="validatedFields" status="waitingStatus">
							<apex:param name="addValidatedFieldEntityName" assignTo="{!SelectedEntityName}" value="" />
							<apex:param name="addValidatedFieldCountryName" assignTo="{!SelectedCountryField}" value="" />
							<apex:param name="addValidatedFieldStateName" assignTo="{!SelectedStateField}" value="" />
							<apex:param name="addValidatedFieldCountryRelateName" assignTo="{!SelectedCountryRelationshipField}" value="" />
							<apex:param name="addValidatedFieldStateRelateName" assignTo="{!SelectedStateRelationshipField}" value="" />
							<apex:param name="addValidatedFieldCountryFieldId" assignTo="{!InputCountryFieldId}" value="" />
							<apex:param name="addValidatedFieldStateFieldId" assignTo="{!InputStateFieldId}" value="" />
							<apex:param name="addValidatedFieldMandatory" assignTo="{!IsCheckedMandatory}" value="" />
							<apex:param name="addValidatedFieldAllowOnly" assignTo="{!IsCheckedAllowOnlyListedCountries}" value="" />
							<apex:param name="addValidatedFieldStandardize" assignTo="{!IsCheckedStandardize}" value="" />
						</apex:actionFunction>
						<apex:actionFunction name="openAddDialog" action="{!ShowAddDialog}" reRender="editFieldDialog" status="waitingStatusEditing" />
						<apex:actionFunction name="openEditDialog" action="{!ShowEditDialog}" reRender="editFieldDialog" status="waitingStatusEditing">
							<apex:param name="editValidatedFieldEntityName" assignTo="{!SelectedEntityName}" value="" />
							<apex:param name="editValidatedFieldCountryName" assignTo="{!SelectedCountryField}" value="" />
						</apex:actionFunction>
						<apex:actionFunction name="removeValidatedField" action="{!RemoveValidatedField}" reRender="validatedFields" status="waitingStatus">
							<apex:param name="removeValidatedFieldEntityName" assignTo="{!SelectedEntityName}" value="" />
							<apex:param name="removeValidatedFieldCountryName" assignTo="{!SelectedCountryField}" value="" />
						</apex:actionFunction>	
						<apex:actionStatus id="waitingStatus" onstart="blockUI('dlgWait')" onstop="unblockUI()" />
						<apex:actionStatus id="waitingStatusEditing" onstart="blockUI('dlgWait')" onstop="blockUI('dlgFieldsAddEdit')" />		                
						<apex:outputPanel id="validatedFields">
							<apex:pageBlockTable value="{!FieldToValidateList}" var="field">
								<apex:column >
									<span>
										<a href="javascript:openEditDialog('{!JSINHTMLENCODE(field.pw_cc__Object__c)}', '{!JSINHTMLENCODE(field.pw_cc__CountryField__c)}');">Edit</a> | <a href="javascript:removeValidatedField('{!JSINHTMLENCODE(field.pw_cc__Object__c)}', '{!JSINHTMLENCODE(field.pw_cc__CountryField__c)}');">Del</a>
									</span>
									<apex:facet name="header">
										Action
									</apex:facet>
								</apex:column>
								<apex:column headerValue="Object">
									<label style="padding-left:5px;">{!field.pw_cc__Object__c}</label>
								</apex:column>
								<apex:column headerValue="Country Field">
									<label style="padding-left:5px;">{!field.pw_cc__CountryField__c}</label>
								</apex:column>
								<apex:column headerValue="State Field" rendered="{!IsVersionPro}">
									<apex:outputPanel rendered="{!field.pw_cc__StateField__c != null}">
	                 						<label style="padding-left:5px;">{!field.pw_cc__StateField__c}</label>
									</apex:outputPanel>
									<apex:outputPanel rendered="{!field.pw_cc__StateField__c == null}">
	                 						&nbsp;
	                 					</apex:outputPanel>
								</apex:column>
								<apex:column >
									<apex:outputPanel rendered="{!NOT(field.pw_cc__IsCountryMandatory__c)}">
	                 						<img height="16" width="21" title="Not Mandatory" class="checkImg" alt="Not Mandatory" src="/img/checkbox_unchecked.gif"></img>
									</apex:outputPanel>
		     						<apex:outputPanel rendered="{!field.pw_cc__IsCountryMandatory__c}">
	                 						<img height="16" width="21" title="Mandatory" class="checkImg" alt="Mandatory" src="/img/checkbox_checked.gif"></img>
	                 					</apex:outputPanel>
	                 					<apex:facet name="header">
										<span title="Is Country Mandatory">Country Mandatory</span>
									</apex:facet>
								</apex:column>
								<apex:column >
									<apex:outputPanel rendered="{!NOT(field.pw_cc__AllowOnlyListedCountries__c)}">
	                 						<img height="16" width="21" title="Allow Any Value" class="checkImg" alt="Allow Any Value" src="/img/checkbox_unchecked.gif"></img>
									</apex:outputPanel>
		     						<apex:outputPanel rendered="{!field.pw_cc__AllowOnlyListedCountries__c}">
	                 						<img height="16" width="21" title="Allow Only Listed Countries" class="checkImg" alt="Allow Only Listed Countries" src="/img/checkbox_checked.gif"></img>
	                 					</apex:outputPanel>
	                 					<apex:facet name="header">
										<span title="Only Listed Countries">Only Listed Countries</span>
									</apex:facet>
								</apex:column>
								<apex:column >
									<apex:outputPanel rendered="{!NOT(field.pw_cc__Standardize__c)}">
	                 						<img height="16" width="21" title="Do not standardize" class="checkImg" alt="Do not standardize" src="/img/checkbox_unchecked.gif"></img>
									</apex:outputPanel>
		     						<apex:outputPanel rendered="{!field.pw_cc__Standardize__c}">
	                 						<img height="16" width="21" title="Standardize" class="checkImg" alt="Standardize" src="/img/checkbox_checked.gif"></img>
	                 					</apex:outputPanel>
	                 					<apex:facet name="header">
										<span title="Standardize countries">Standardize</span>
									</apex:facet>
								</apex:column>												
							</apex:pageBlockTable>
		            	</apex:outputPanel>
		        	</apex:panelGroup>
		        </apex:pageBlock>
		        <apex:pageBlock title="Address Validation Setup">
					<div>Once you have purchased Address Validation credits, you will be supplied with customer credentials.<br/>Please enter them here.</div>
					<div>
						<table>
							<tr><td><apex:outputLabel for="txtAcCustomerId">Customer ID&nbsp;</apex:outputLabel></td><td><div class="requiredInput"><div class="requiredBlock"></div><apex:inputText id="txtAcCustomerId" value="{!AddressCompleteCustomerID}" /></div></td></tr>
							<tr><td><apex:outputLabel for="txtAcPassword">Password&nbsp;</apex:outputLabel></td><td><div class="requiredInput"><div class="requiredBlock"></div><apex:inputSecret id="txtAcPassword" value="{!AddressCompletePassword}" /></div></td></tr>
							<tr><td colspan="2"><apex:commandButton value="Reset Credentials" action="{!ResetAddressCompleteCredentials}" /></td></tr>
						</table>
					</div>
				</apex:pageBlock>
			</apex:tab>
	
			<apex:tab label="Purchase" ontabenter="initTabs();">
				<apex:pageBlock id="pbPurchaseExtra" title="Credits for extra services">
	        		<apex:pageBlockButtons location="bottom">
	        			<input type="button" class="btn" onclick="updateRemainingCreditList();return false;" value="Refresh" />
		            </apex:pageBlockButtons>
	        		<apex:panelGroup >
						<apex:actionFunction name="updateRemainingCreditList" action="{!UpdateRemainingCreditList}" reRender="credits, install_out" status="waitingStatus">
						</apex:actionFunction>	        		
						<apex:outputPanel id="credits">
				    		<div>Please see the CountryComplete Pricing Guide on the&nbsp;<apex:outputPanel rendered="{!IsVersionPro}"><a href="http://appexchange.salesforce.com/listingDetail?listingId=a0N30000002zt9uEAA" target="_blank">CountryComplete AppExchange page</a></apex:outputPanel><apex:outputPanel rendered="{!NOT(IsVersionPro)}"><a href="http://appexchange.salesforce.com/listingDetail?listingId=a0N30000001SqRFEA0" target="_blank">CountryComplete AppExchange page</a></apex:outputPanel>&nbsp;for current pricing and Special Offer information.</div>
				    		<br />
				    		<apex:pageBlockTable rendered="{!NOT(IsRemainingCreditListEmpty)}" value="{!RemainingCreditList}" var="credit">
					      		<apex:column headerValue="Service" value="{!credit.Service}" />
								<apex:column headerValue="Licensed">
			             			<apex:outputPanel rendered="{!NOT(credit.IsLicensed)}">
										<img height="16" width="21" title="Not Licensed" class="checkImg" alt="Not Licensed" src="/img/checkbox_unchecked.gif"></img>
									</apex:outputPanel>
									<apex:outputPanel rendered="{!credit.IsLicensed}">
										<img height="16" width="21" title="Licensed" class="checkImg" alt="Licensed" src="/img/checkbox_checked.gif"></img>
									</apex:outputPanel>
								</apex:column>
								<apex:column headerValue="Credits Remaining" value="{!credit.CreditsRemaining}" />
								<apex:column headerValue="Expiry Date">
									<apex:outputPanel rendered="{!credit.CreditsExpiryDate != null}">
										{!credit.CreditsExpiryDate}
									</apex:outputPanel>
									<apex:outputPanel rendered="{!credit.CreditsExpiryDate == null}">
										&nbsp;
									</apex:outputPanel>
								</apex:column>
			            		<apex:column headerValue="Purchase">
			            			<input type="button" class="btn" onclick="buyAdditionalCredits('{!credit.ProductId}');return false;" value="Purchase Credits" />
			            			<div style="display:none;">
										<a id="btnPurchase{!credit.ProductId}" target="_blank" href="https://secure.shareit.com/shareit/checkout.html?hidecoupon=1&js=-1&PRODUCT[{!credit.ProductId}]=1">Purchase {!credit.Service} Credits</a>
			        				</div>		            			
			            		</apex:column>
			        		</apex:pageBlockTable>
			        		<apex:outputPanel rendered="{!IsRemainingCreditListEmpty}">Click the&nbsp;<apex:commandLink action="{!UpdateRemainingCreditList}" reRender="credits, install_out" status="waitingStatus" value="[Refresh]"></apex:commandLink>&nbsp;button below to show your current credit entitlement</apex:outputPanel>
		        		</apex:outputPanel>      				
	        		</apex:panelGroup>	
				</apex:pageBlock>
				<apex:pageBlock id="pbPurchase" rendered="{!IsVersionPro}" title="Purchase user licenses">
	                <apex:panelGroup >
		                <div>Please consult the CountryComplete Pro&nbsp;<a target="_blank" href="http://sites.force.com/appexchange/listingDetail?listingId=a0N30000002zt9uEAA">AppExchange listing</a>&nbsp;page or alternatively enter the quantity of users below for a quotation in your local currency</div>
		                <br />
		                <div>
		              		<table>
		              			<tr>
		              				<td><label for="txtLicenses">Users:</label>&nbsp;</td>
		              				<td><div class="requiredInput"><div class="requiredBlock"></div><input type="text" id="txtLicenses" style="width:40px;"/>&nbsp;</div></td>
		              				<td>
		              					<input type="button" id="btnPurchase" class="btn" onclick="buyLicense();return false;" value="Quote / Buy" />&nbsp;
					  					<span id="lblBuyMessage" style="color:red;"></span>
				 							<div style="display:none;">
											<a id="btnBuyLicense" target="_blank" href="https://secure.shareit.com/shareit/checkout.html?hidecoupon=1&js=-1&PRODUCT[300377343]=1">Purchase CountryCompletePro Licenses</a>
											<a id="btnBuyAdditionalLicense" target="_blank" href="https://secure.shareit.com/shareit/checkout.html?hidecoupon=1&js=-1&PRODUCT[300377343]=1&PRODUCT[300377344]=">Purchase additional CountryCompletePro Licenses</a>
				        				</div>
		              				</td>
		              			</tr>
		              		</table>
		                </div>
	                </apex:panelGroup>
	            </apex:pageBlock>
	       	    <div style="font-style:italic;margin-top:1em;">
	       	    	<div style="width:100%;text-align:center;">Please have your Salesforce Organization ID&nbsp;-&nbsp;<span style="color:red;"><b>{!OrganizationId}</b></span>&nbsp;–&nbsp;ready to enter as part of the order process.</div>
	                <div style="width:100%;text-align:center;"><a href="http://www.provenworks.com" title="ProvenWorks">ProvenWorks</a> uses <a href="http://www.shareit.com" title="share*it!">share*it!</a> for the CountryComplete ordering process</div>
	                <div style="width:100%;text-align:center;">Credits are valid for 1 year from date of purchase</div>
	            </div>
			</apex:tab>
	
			<apex:tab label="Help" ontabenter="initTabs();">
				<apex:pageBlock title="Suggestions">
		  	         <div>We'd love to hear your ideas on how we can improve CountryComplete, please <a href="http://countrycomplete.uservoice.com" alt="CountryComplete Ideas">suggest them</a>!</div>
		        </apex:pageBlock>
				<apex:pageBlock title="Frequently Asked Questions">
		            <ul style="padding:0; margin:0pt;">
				    	<li style="margin-bottom:10pt;">
		        	        After updating the countries, the country Autocomplete shows incorrect items.<br/>
		                    <i>
		                        The browser is likely caching the old country information, force a refresh using CTRL+F5 to fetch the new country list.
		           	        </i>
		      			</li>
				    	<li style="margin-bottom:10pt;">
		        		   	Why are some of the country names truncated?<br/>
		                    <i>
		                        Some of the standard country fields inside Salesforce have a maximum length of 40 characters despite some full English country names being longer than this. 
		                        To avoid any nasty errors, all the country names that we use are truncated to fit in this size.
		           	        </i>
		      			</li>
				        <li style="margin-bottom:10pt;">
		     	          	Standard Users receive the error &quot;System.QueryException: sObject type &#39;{!IF(IsVersionPro, 'pw_ccpro', 'pw_cc')}__Setting__c&#39; is not supported.: ({!IF(IsVersionPro, 'pw_ccpro', 'pw_cc')})&quot; when making changes to an Account.<br/>
							<i>
								This is caused by the CountryComplete not being deployed yet. 
								To resolve this simply go to Setup->View->Installed Packaged.
								Then click &quot;CountryComplete&quot;, then click the &quot;Deploy&quot; button
		        	       	</i>
		      			</li>
		      			<li style="margin-bottom:10pt;display:{!IF(IsVersionPro,'none','list-item')}">
		      				We would like to store the ISO code rather than the full name, how can we do that?<br/>
		      				<i>
		      					<a href="https://sites.secure.force.com/appexchange/listingDetail?listingId=a0N30000002zt9uEAA">CountryComplete Pro</a>, available from the AppExchange has an easily selectable option for this 
		      				</i>
		      			</li>
		      			<li style="margin-bottom:10pt;display:{!IF(IsVersionPro,'none','list-item')}">
		      				When will you be adding support for States?<br/>
		      				<i>
		      					<a href="https://sites.secure.force.com/appexchange/listingDetail?listingId=a0N30000002zt9uEAA">CountryComplete Pro</a>, available from the AppExchange not only has support for States but comes pre-populated with reference data for a variety of countries
		      				</i>
		      			</li>
		            </ul>
		            <div>For any enquires please contact <a href="mailto:sales@provenworks.com" title="sales@provenworks.com">sales@provenworks.com</a></div>
		        </apex:pageBlock>
	       	</apex:tab>
		</apex:tabPanel>
    </apex:form>
</apex:page>